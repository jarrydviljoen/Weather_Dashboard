name: Weather Dashboard CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      # Set up Python service for the backend (API)
      web:
        image: python:3.9
        ports:
          - 8000:8000  # Assuming the backend runs on port 8000
        volumes:
          - .:/app
        options: >-
          --health-cmd="curl -f http://localhost:8000/ || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        command: >
          sh -c "pip install -r requirements.txt && python app/api-fastapi-implementation.py"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python API tests
      run: pytest tests/test_weather_api.py  # Adjust to your test file

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install frontend dependencies
      run: npm install  # Assuming your frontend uses npm

    - name: Wait for backend to be ready
      run: sleep 10  # Wait for backend to start

    - name: Test Python backend is running
      run: |
        curl -I http://localhost:8000  # Ensure the backend is responding

    - name: Test frontend
      run: |
        curl -s http://localhost:8000 | grep "<title>"  # Check if the title element is present in HTML

    - name: Test page content (HTML and API data)
      run: |
        curl -s http://localhost:8000 | grep "Weather Dashboard"  # Check if "Weather Dashboard" text is present


